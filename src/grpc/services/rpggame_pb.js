// source: src/grpc/proto/rpggame.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require("google-protobuf")
var goog = jspb
var global = function () {
	return this || window || global || self || Function("return this")()
}.call(null)

goog.exportSymbol("proto.rpggame.Bool", null, global)
goog.exportSymbol("proto.rpggame.GameEvent", null, global)
goog.exportSymbol("proto.rpggame.GameSetting", null, global)
goog.exportSymbol("proto.rpggame.Int", null, global)
goog.exportSymbol("proto.rpggame.JsonResponse", null, global)
goog.exportSymbol("proto.rpggame.ProtoPlayer", null, global)
goog.exportSymbol("proto.rpggame.SimpleRequest", null, global)
goog.exportSymbol("proto.rpggame.SimulationEvent", null, global)
goog.exportSymbol("proto.rpggame.SimulationSetting", null, global)
goog.exportSymbol("proto.rpggame.String", null, global)
goog.exportSymbol("proto.rpggame.UserSecureRequest", null, global)
goog.exportSymbol("proto.rpggame.UserUpdateRequest", null, global)
goog.exportSymbol("proto.rpggame.Void", null, global)
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.Int = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.Int, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.Int.displayName = "proto.rpggame.Int"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.Void = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.Void, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.Void.displayName = "proto.rpggame.Void"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.Bool = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.Bool, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.Bool.displayName = "proto.rpggame.Bool"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.String = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.String, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.String.displayName = "proto.rpggame.String"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.ProtoPlayer = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.ProtoPlayer, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.ProtoPlayer.displayName = "proto.rpggame.ProtoPlayer"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.GameSetting = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.rpggame.GameSetting.repeatedFields_, null)
}
goog.inherits(proto.rpggame.GameSetting, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.GameSetting.displayName = "proto.rpggame.GameSetting"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.SimpleRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.SimpleRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.SimpleRequest.displayName = "proto.rpggame.SimpleRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.UserUpdateRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.UserUpdateRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.UserUpdateRequest.displayName = "proto.rpggame.UserUpdateRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.UserSecureRequest = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.UserSecureRequest, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.UserSecureRequest.displayName = "proto.rpggame.UserSecureRequest"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.JsonResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.JsonResponse, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.JsonResponse.displayName = "proto.rpggame.JsonResponse"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.GameEvent = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.GameEvent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.GameEvent.displayName = "proto.rpggame.GameEvent"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.SimulationEvent = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.SimulationEvent, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.SimulationEvent.displayName = "proto.rpggame.SimulationEvent"
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rpggame.SimulationSetting = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.rpggame.SimulationSetting, jspb.Message)
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.rpggame.SimulationSetting.displayName = "proto.rpggame.SimulationSetting"
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.Int.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.Int.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.Int} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.Int.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				val: jspb.Message.getFieldWithDefault(msg, 1, 0),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.Int}
 */
proto.rpggame.Int.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.Int()
	return proto.rpggame.Int.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.Int} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.Int}
 */
proto.rpggame.Int.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setVal(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.Int.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.Int.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.Int} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.Int.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getVal()
	if (f !== 0) {
		writer.writeInt32(1, f)
	}
}

/**
 * optional int32 val = 1;
 * @return {number}
 */
proto.rpggame.Int.prototype.getVal = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.Int} returns this
 */
proto.rpggame.Int.prototype.setVal = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.Void.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.Void.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.Void} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.Void.toObject = function (includeInstance, msg) {
		var f,
			obj = {}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.Void}
 */
proto.rpggame.Void.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.Void()
	return proto.rpggame.Void.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.Void}
 */
proto.rpggame.Void.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.Void.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.Void.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.Void.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.Bool.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.Bool.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.Bool} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.Bool.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				val: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.Bool}
 */
proto.rpggame.Bool.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.Bool()
	return proto.rpggame.Bool.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.Bool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.Bool}
 */
proto.rpggame.Bool.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {boolean} */ (reader.readBool())
				msg.setVal(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.Bool.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.Bool.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.Bool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.Bool.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getVal()
	if (f) {
		writer.writeBool(1, f)
	}
}

/**
 * optional bool val = 1;
 * @return {boolean}
 */
proto.rpggame.Bool.prototype.getVal = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false))
}

/**
 * @param {boolean} value
 * @return {!proto.rpggame.Bool} returns this
 */
proto.rpggame.Bool.prototype.setVal = function (value) {
	return jspb.Message.setProto3BooleanField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.String.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.String.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.String} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.String.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				val: jspb.Message.getFieldWithDefault(msg, 1, ""),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.String}
 */
proto.rpggame.String.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.String()
	return proto.rpggame.String.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.String} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.String}
 */
proto.rpggame.String.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setVal(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.String.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.String.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.String} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.String.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getVal()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
}

/**
 * optional string val = 1;
 * @return {string}
 */
proto.rpggame.String.prototype.getVal = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.String} returns this
 */
proto.rpggame.String.prototype.setVal = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.ProtoPlayer.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.ProtoPlayer.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.ProtoPlayer} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.ProtoPlayer.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				type: jspb.Message.getFieldWithDefault(msg, 1, ""),
				name: jspb.Message.getFieldWithDefault(msg, 2, ""),
				team: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
				champ: jspb.Message.getFieldWithDefault(msg, 4, 0),
				ready: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
				userclass: jspb.Message.getFieldWithDefault(msg, 6, 0),
				data: jspb.Message.getFieldWithDefault(msg, 7, ""),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.ProtoPlayer}
 */
proto.rpggame.ProtoPlayer.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.ProtoPlayer()
	return proto.rpggame.ProtoPlayer.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.ProtoPlayer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.ProtoPlayer}
 */
proto.rpggame.ProtoPlayer.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setType(value)
				break
			case 2:
				var value = /** @type {string} */ (reader.readString())
				msg.setName(value)
				break
			case 3:
				var value = /** @type {boolean} */ (reader.readBool())
				msg.setTeam(value)
				break
			case 4:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setChamp(value)
				break
			case 5:
				var value = /** @type {boolean} */ (reader.readBool())
				msg.setReady(value)
				break
			case 6:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setUserclass(value)
				break
			case 7:
				var value = /** @type {string} */ (reader.readString())
				msg.setData(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.ProtoPlayer.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.ProtoPlayer.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.ProtoPlayer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.ProtoPlayer.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getType()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getName()
	if (f.length > 0) {
		writer.writeString(2, f)
	}
	f = message.getTeam()
	if (f) {
		writer.writeBool(3, f)
	}
	f = message.getChamp()
	if (f !== 0) {
		writer.writeInt32(4, f)
	}
	f = message.getReady()
	if (f) {
		writer.writeBool(5, f)
	}
	f = message.getUserclass()
	if (f !== 0) {
		writer.writeInt32(6, f)
	}
	f = message.getData()
	if (f.length > 0) {
		writer.writeString(7, f)
	}
}

/**
 * optional string type = 1;
 * @return {string}
 */
proto.rpggame.ProtoPlayer.prototype.getType = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.ProtoPlayer} returns this
 */
proto.rpggame.ProtoPlayer.prototype.setType = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string name = 2;
 * @return {string}
 */
proto.rpggame.ProtoPlayer.prototype.getName = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.ProtoPlayer} returns this
 */
proto.rpggame.ProtoPlayer.prototype.setName = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional bool team = 3;
 * @return {boolean}
 */
proto.rpggame.ProtoPlayer.prototype.getTeam = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false))
}

/**
 * @param {boolean} value
 * @return {!proto.rpggame.ProtoPlayer} returns this
 */
proto.rpggame.ProtoPlayer.prototype.setTeam = function (value) {
	return jspb.Message.setProto3BooleanField(this, 3, value)
}

/**
 * optional int32 champ = 4;
 * @return {number}
 */
proto.rpggame.ProtoPlayer.prototype.getChamp = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.ProtoPlayer} returns this
 */
proto.rpggame.ProtoPlayer.prototype.setChamp = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value)
}

/**
 * optional bool ready = 5;
 * @return {boolean}
 */
proto.rpggame.ProtoPlayer.prototype.getReady = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false))
}

/**
 * @param {boolean} value
 * @return {!proto.rpggame.ProtoPlayer} returns this
 */
proto.rpggame.ProtoPlayer.prototype.setReady = function (value) {
	return jspb.Message.setProto3BooleanField(this, 5, value)
}

/**
 * optional int32 userClass = 6;
 * @return {number}
 */
proto.rpggame.ProtoPlayer.prototype.getUserclass = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.ProtoPlayer} returns this
 */
proto.rpggame.ProtoPlayer.prototype.setUserclass = function (value) {
	return jspb.Message.setProto3IntField(this, 6, value)
}

/**
 * optional string data = 7;
 * @return {string}
 */
proto.rpggame.ProtoPlayer.prototype.getData = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.ProtoPlayer} returns this
 */
proto.rpggame.ProtoPlayer.prototype.setData = function (value) {
	return jspb.Message.setProto3StringField(this, 7, value)
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rpggame.GameSetting.repeatedFields_ = [5]

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.GameSetting.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.GameSetting.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.GameSetting} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.GameSetting.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
				gametype: jspb.Message.getFieldWithDefault(msg, 2, ""),
				map: jspb.Message.getFieldWithDefault(msg, 3, 0),
				isteam: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
				playerlistList: jspb.Message.toObjectList(
					msg.getPlayerlistList(),
					proto.rpggame.ProtoPlayer.toObject,
					includeInstance
				),
				gamesettingjson: jspb.Message.getFieldWithDefault(msg, 6, ""),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.GameSetting}
 */
proto.rpggame.GameSetting.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.GameSetting()
	return proto.rpggame.GameSetting.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.GameSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.GameSetting}
 */
proto.rpggame.GameSetting.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			case 2:
				var value = /** @type {string} */ (reader.readString())
				msg.setGametype(value)
				break
			case 3:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setMap(value)
				break
			case 4:
				var value = /** @type {boolean} */ (reader.readBool())
				msg.setIsteam(value)
				break
			case 5:
				var value = new proto.rpggame.ProtoPlayer()
				reader.readMessage(value, proto.rpggame.ProtoPlayer.deserializeBinaryFromReader)
				msg.addPlayerlist(value)
				break
			case 6:
				var value = /** @type {string} */ (reader.readString())
				msg.setGamesettingjson(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.GameSetting.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.GameSetting.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.GameSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.GameSetting.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getGametype()
	if (f.length > 0) {
		writer.writeString(2, f)
	}
	f = message.getMap()
	if (f !== 0) {
		writer.writeInt32(3, f)
	}
	f = message.getIsteam()
	if (f) {
		writer.writeBool(4, f)
	}
	f = message.getPlayerlistList()
	if (f.length > 0) {
		writer.writeRepeatedMessage(5, f, proto.rpggame.ProtoPlayer.serializeBinaryToWriter)
	}
	f = message.getGamesettingjson()
	if (f.length > 0) {
		writer.writeString(6, f)
	}
}

/**
 * optional string rname = 1;
 * @return {string}
 */
proto.rpggame.GameSetting.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.GameSetting} returns this
 */
proto.rpggame.GameSetting.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string gametype = 2;
 * @return {string}
 */
proto.rpggame.GameSetting.prototype.getGametype = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.GameSetting} returns this
 */
proto.rpggame.GameSetting.prototype.setGametype = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional int32 map = 3;
 * @return {number}
 */
proto.rpggame.GameSetting.prototype.getMap = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.GameSetting} returns this
 */
proto.rpggame.GameSetting.prototype.setMap = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value)
}

/**
 * optional bool isTeam = 4;
 * @return {boolean}
 */
proto.rpggame.GameSetting.prototype.getIsteam = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false))
}

/**
 * @param {boolean} value
 * @return {!proto.rpggame.GameSetting} returns this
 */
proto.rpggame.GameSetting.prototype.setIsteam = function (value) {
	return jspb.Message.setProto3BooleanField(this, 4, value)
}

/**
 * repeated ProtoPlayer playerlist = 5;
 * @return {!Array<!proto.rpggame.ProtoPlayer>}
 */
proto.rpggame.GameSetting.prototype.getPlayerlistList = function () {
	return /** @type{!Array<!proto.rpggame.ProtoPlayer>} */ (
		jspb.Message.getRepeatedWrapperField(this, proto.rpggame.ProtoPlayer, 5)
	)
}

/**
 * @param {!Array<!proto.rpggame.ProtoPlayer>} value
 * @return {!proto.rpggame.GameSetting} returns this
 */
proto.rpggame.GameSetting.prototype.setPlayerlistList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 5, value)
}

/**
 * @param {!proto.rpggame.ProtoPlayer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rpggame.ProtoPlayer}
 */
proto.rpggame.GameSetting.prototype.addPlayerlist = function (opt_value, opt_index) {
	return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.rpggame.ProtoPlayer, opt_index)
}

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rpggame.GameSetting} returns this
 */
proto.rpggame.GameSetting.prototype.clearPlayerlistList = function () {
	return this.setPlayerlistList([])
}

/**
 * optional string gameSettingJson = 6;
 * @return {string}
 */
proto.rpggame.GameSetting.prototype.getGamesettingjson = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.GameSetting} returns this
 */
proto.rpggame.GameSetting.prototype.setGamesettingjson = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.SimpleRequest.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.SimpleRequest.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.SimpleRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.SimpleRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
				turn: jspb.Message.getFieldWithDefault(msg, 2, 0),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.SimpleRequest}
 */
proto.rpggame.SimpleRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.SimpleRequest()
	return proto.rpggame.SimpleRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.SimpleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.SimpleRequest}
 */
proto.rpggame.SimpleRequest.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			case 2:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setTurn(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.SimpleRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.SimpleRequest.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.SimpleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.SimpleRequest.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getTurn()
	if (f !== 0) {
		writer.writeInt32(2, f)
	}
}

/**
 * optional string rname = 1;
 * @return {string}
 */
proto.rpggame.SimpleRequest.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.SimpleRequest} returns this
 */
proto.rpggame.SimpleRequest.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional int32 turn = 2;
 * @return {number}
 */
proto.rpggame.SimpleRequest.prototype.getTurn = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.SimpleRequest} returns this
 */
proto.rpggame.SimpleRequest.prototype.setTurn = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.UserUpdateRequest.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.UserUpdateRequest.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.UserUpdateRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.UserUpdateRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				type: jspb.Message.getFieldWithDefault(msg, 1, ""),
				jsondata: jspb.Message.getFieldWithDefault(msg, 2, ""),
				rname: jspb.Message.getFieldWithDefault(msg, 3, ""),
				turn: jspb.Message.getFieldWithDefault(msg, 4, 0),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.UserUpdateRequest}
 */
proto.rpggame.UserUpdateRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.UserUpdateRequest()
	return proto.rpggame.UserUpdateRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.UserUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.UserUpdateRequest}
 */
proto.rpggame.UserUpdateRequest.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setType(value)
				break
			case 2:
				var value = /** @type {string} */ (reader.readString())
				msg.setJsondata(value)
				break
			case 3:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			case 4:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setTurn(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.UserUpdateRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.UserUpdateRequest.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.UserUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.UserUpdateRequest.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getType()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = /** @type {string} */ (jspb.Message.getField(message, 2))
	if (f != null) {
		writer.writeString(2, f)
	}
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(3, f)
	}
	f = message.getTurn()
	if (f !== 0) {
		writer.writeInt32(4, f)
	}
}

/**
 * optional string type = 1;
 * @return {string}
 */
proto.rpggame.UserUpdateRequest.prototype.getType = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.UserUpdateRequest} returns this
 */
proto.rpggame.UserUpdateRequest.prototype.setType = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string jsonData = 2;
 * @return {string}
 */
proto.rpggame.UserUpdateRequest.prototype.getJsondata = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.UserUpdateRequest} returns this
 */
proto.rpggame.UserUpdateRequest.prototype.setJsondata = function (value) {
	return jspb.Message.setField(this, 2, value)
}

/**
 * Clears the field making it undefined.
 * @return {!proto.rpggame.UserUpdateRequest} returns this
 */
proto.rpggame.UserUpdateRequest.prototype.clearJsondata = function () {
	return jspb.Message.setField(this, 2, undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpggame.UserUpdateRequest.prototype.hasJsondata = function () {
	return jspb.Message.getField(this, 2) != null
}

/**
 * optional string rname = 3;
 * @return {string}
 */
proto.rpggame.UserUpdateRequest.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.UserUpdateRequest} returns this
 */
proto.rpggame.UserUpdateRequest.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional int32 turn = 4;
 * @return {number}
 */
proto.rpggame.UserUpdateRequest.prototype.getTurn = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.UserUpdateRequest} returns this
 */
proto.rpggame.UserUpdateRequest.prototype.setTurn = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.UserSecureRequest.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.UserSecureRequest.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.UserSecureRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.UserSecureRequest.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				type: jspb.Message.getFieldWithDefault(msg, 1, ""),
				turntoken: jspb.Message.getFieldWithDefault(msg, 2, ""),
				jsondata: jspb.Message.getFieldWithDefault(msg, 3, ""),
				rname: jspb.Message.getFieldWithDefault(msg, 5, ""),
				turn: jspb.Message.getFieldWithDefault(msg, 4, 0),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.UserSecureRequest}
 */
proto.rpggame.UserSecureRequest.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.UserSecureRequest()
	return proto.rpggame.UserSecureRequest.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.UserSecureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.UserSecureRequest}
 */
proto.rpggame.UserSecureRequest.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setType(value)
				break
			case 2:
				var value = /** @type {string} */ (reader.readString())
				msg.setTurntoken(value)
				break
			case 3:
				var value = /** @type {string} */ (reader.readString())
				msg.setJsondata(value)
				break
			case 5:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			case 4:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setTurn(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.UserSecureRequest.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.UserSecureRequest.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.UserSecureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.UserSecureRequest.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getType()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getTurntoken()
	if (f.length > 0) {
		writer.writeString(2, f)
	}
	f = /** @type {string} */ (jspb.Message.getField(message, 3))
	if (f != null) {
		writer.writeString(3, f)
	}
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(5, f)
	}
	f = message.getTurn()
	if (f !== 0) {
		writer.writeInt32(4, f)
	}
}

/**
 * optional string type = 1;
 * @return {string}
 */
proto.rpggame.UserSecureRequest.prototype.getType = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.UserSecureRequest} returns this
 */
proto.rpggame.UserSecureRequest.prototype.setType = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string turnToken = 2;
 * @return {string}
 */
proto.rpggame.UserSecureRequest.prototype.getTurntoken = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.UserSecureRequest} returns this
 */
proto.rpggame.UserSecureRequest.prototype.setTurntoken = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string jsonData = 3;
 * @return {string}
 */
proto.rpggame.UserSecureRequest.prototype.getJsondata = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.UserSecureRequest} returns this
 */
proto.rpggame.UserSecureRequest.prototype.setJsondata = function (value) {
	return jspb.Message.setField(this, 3, value)
}

/**
 * Clears the field making it undefined.
 * @return {!proto.rpggame.UserSecureRequest} returns this
 */
proto.rpggame.UserSecureRequest.prototype.clearJsondata = function () {
	return jspb.Message.setField(this, 3, undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpggame.UserSecureRequest.prototype.hasJsondata = function () {
	return jspb.Message.getField(this, 3) != null
}

/**
 * optional string rname = 5;
 * @return {string}
 */
proto.rpggame.UserSecureRequest.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.UserSecureRequest} returns this
 */
proto.rpggame.UserSecureRequest.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value)
}

/**
 * optional int32 turn = 4;
 * @return {number}
 */
proto.rpggame.UserSecureRequest.prototype.getTurn = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.UserSecureRequest} returns this
 */
proto.rpggame.UserSecureRequest.prototype.setTurn = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.JsonResponse.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.JsonResponse.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.JsonResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.JsonResponse.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				jsondata: jspb.Message.getFieldWithDefault(msg, 1, ""),
				rname: jspb.Message.getFieldWithDefault(msg, 2, ""),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.JsonResponse}
 */
proto.rpggame.JsonResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.JsonResponse()
	return proto.rpggame.JsonResponse.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.JsonResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.JsonResponse}
 */
proto.rpggame.JsonResponse.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setJsondata(value)
				break
			case 2:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.JsonResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.JsonResponse.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.JsonResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.JsonResponse.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getJsondata()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(2, f)
	}
}

/**
 * optional string jsonData = 1;
 * @return {string}
 */
proto.rpggame.JsonResponse.prototype.getJsondata = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.JsonResponse} returns this
 */
proto.rpggame.JsonResponse.prototype.setJsondata = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string rname = 2;
 * @return {string}
 */
proto.rpggame.JsonResponse.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.JsonResponse} returns this
 */
proto.rpggame.JsonResponse.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value)
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.GameEvent.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.GameEvent.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.GameEvent} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.GameEvent.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
				jsonobj: jspb.Message.getFieldWithDefault(msg, 2, ""),
				type: jspb.Message.getFieldWithDefault(msg, 3, ""),
				isgameover: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.GameEvent}
 */
proto.rpggame.GameEvent.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.GameEvent()
	return proto.rpggame.GameEvent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.GameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.GameEvent}
 */
proto.rpggame.GameEvent.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			case 2:
				var value = /** @type {string} */ (reader.readString())
				msg.setJsonobj(value)
				break
			case 3:
				var value = /** @type {string} */ (reader.readString())
				msg.setType(value)
				break
			case 4:
				var value = /** @type {boolean} */ (reader.readBool())
				msg.setIsgameover(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.GameEvent.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.GameEvent.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.GameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.GameEvent.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getJsonobj()
	if (f.length > 0) {
		writer.writeString(2, f)
	}
	f = message.getType()
	if (f.length > 0) {
		writer.writeString(3, f)
	}
	f = /** @type {boolean} */ (jspb.Message.getField(message, 4))
	if (f != null) {
		writer.writeBool(4, f)
	}
}

/**
 * optional string rname = 1;
 * @return {string}
 */
proto.rpggame.GameEvent.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.GameEvent} returns this
 */
proto.rpggame.GameEvent.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string jsonObj = 2;
 * @return {string}
 */
proto.rpggame.GameEvent.prototype.getJsonobj = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.GameEvent} returns this
 */
proto.rpggame.GameEvent.prototype.setJsonobj = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string type = 3;
 * @return {string}
 */
proto.rpggame.GameEvent.prototype.getType = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.GameEvent} returns this
 */
proto.rpggame.GameEvent.prototype.setType = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional bool isGameOver = 4;
 * @return {boolean}
 */
proto.rpggame.GameEvent.prototype.getIsgameover = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false))
}

/**
 * @param {boolean} value
 * @return {!proto.rpggame.GameEvent} returns this
 */
proto.rpggame.GameEvent.prototype.setIsgameover = function (value) {
	return jspb.Message.setField(this, 4, value)
}

/**
 * Clears the field making it undefined.
 * @return {!proto.rpggame.GameEvent} returns this
 */
proto.rpggame.GameEvent.prototype.clearIsgameover = function () {
	return jspb.Message.setField(this, 4, undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpggame.GameEvent.prototype.hasIsgameover = function () {
	return jspb.Message.getField(this, 4) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.SimulationEvent.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.SimulationEvent.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.SimulationEvent} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.SimulationEvent.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
				type: jspb.Message.getFieldWithDefault(msg, 2, ""),
				jsonobj: jspb.Message.getFieldWithDefault(msg, 3, ""),
				isgameover: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.SimulationEvent}
 */
proto.rpggame.SimulationEvent.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.SimulationEvent()
	return proto.rpggame.SimulationEvent.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.SimulationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.SimulationEvent}
 */
proto.rpggame.SimulationEvent.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			case 2:
				var value = /** @type {string} */ (reader.readString())
				msg.setType(value)
				break
			case 3:
				var value = /** @type {string} */ (reader.readString())
				msg.setJsonobj(value)
				break
			case 4:
				var value = /** @type {boolean} */ (reader.readBool())
				msg.setIsgameover(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.SimulationEvent.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.SimulationEvent.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.SimulationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.SimulationEvent.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getType()
	if (f.length > 0) {
		writer.writeString(2, f)
	}
	f = message.getJsonobj()
	if (f.length > 0) {
		writer.writeString(3, f)
	}
	f = /** @type {boolean} */ (jspb.Message.getField(message, 4))
	if (f != null) {
		writer.writeBool(4, f)
	}
}

/**
 * optional string rname = 1;
 * @return {string}
 */
proto.rpggame.SimulationEvent.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.SimulationEvent} returns this
 */
proto.rpggame.SimulationEvent.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional string type = 2;
 * @return {string}
 */
proto.rpggame.SimulationEvent.prototype.getType = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.SimulationEvent} returns this
 */
proto.rpggame.SimulationEvent.prototype.setType = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value)
}

/**
 * optional string jsonObj = 3;
 * @return {string}
 */
proto.rpggame.SimulationEvent.prototype.getJsonobj = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.SimulationEvent} returns this
 */
proto.rpggame.SimulationEvent.prototype.setJsonobj = function (value) {
	return jspb.Message.setProto3StringField(this, 3, value)
}

/**
 * optional bool isGameOver = 4;
 * @return {boolean}
 */
proto.rpggame.SimulationEvent.prototype.getIsgameover = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false))
}

/**
 * @param {boolean} value
 * @return {!proto.rpggame.SimulationEvent} returns this
 */
proto.rpggame.SimulationEvent.prototype.setIsgameover = function (value) {
	return jspb.Message.setField(this, 4, value)
}

/**
 * Clears the field making it undefined.
 * @return {!proto.rpggame.SimulationEvent} returns this
 */
proto.rpggame.SimulationEvent.prototype.clearIsgameover = function () {
	return jspb.Message.setField(this, 4, undefined)
}

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.rpggame.SimulationEvent.prototype.hasIsgameover = function () {
	return jspb.Message.getField(this, 4) != null
}

if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.rpggame.SimulationSetting.prototype.toObject = function (opt_includeInstance) {
		return proto.rpggame.SimulationSetting.toObject(opt_includeInstance, this)
	}

	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.rpggame.SimulationSetting} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.rpggame.SimulationSetting.toObject = function (includeInstance, msg) {
		var f,
			obj = {
				rname: jspb.Message.getFieldWithDefault(msg, 1, ""),
				count: jspb.Message.getFieldWithDefault(msg, 2, 0),
				isteam: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
				runnerid: jspb.Message.getFieldWithDefault(msg, 4, ""),
				simulationsettingjson: jspb.Message.getFieldWithDefault(msg, 5, ""),
			}

		if (includeInstance) {
			obj.$jspbMessageInstance = msg
		}
		return obj
	}
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rpggame.SimulationSetting}
 */
proto.rpggame.SimulationSetting.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes)
	var msg = new proto.rpggame.SimulationSetting()
	return proto.rpggame.SimulationSetting.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rpggame.SimulationSetting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rpggame.SimulationSetting}
 */
proto.rpggame.SimulationSetting.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break
		}
		var field = reader.getFieldNumber()
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString())
				msg.setRname(value)
				break
			case 2:
				var value = /** @type {number} */ (reader.readInt32())
				msg.setCount(value)
				break
			case 3:
				var value = /** @type {boolean} */ (reader.readBool())
				msg.setIsteam(value)
				break
			case 4:
				var value = /** @type {string} */ (reader.readString())
				msg.setRunnerid(value)
				break
			case 5:
				var value = /** @type {string} */ (reader.readString())
				msg.setSimulationsettingjson(value)
				break
			default:
				reader.skipField()
				break
		}
	}
	return msg
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rpggame.SimulationSetting.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter()
	proto.rpggame.SimulationSetting.serializeBinaryToWriter(this, writer)
	return writer.getResultBuffer()
}

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rpggame.SimulationSetting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rpggame.SimulationSetting.serializeBinaryToWriter = function (message, writer) {
	var f = undefined
	f = message.getRname()
	if (f.length > 0) {
		writer.writeString(1, f)
	}
	f = message.getCount()
	if (f !== 0) {
		writer.writeInt32(2, f)
	}
	f = message.getIsteam()
	if (f) {
		writer.writeBool(3, f)
	}
	f = message.getRunnerid()
	if (f.length > 0) {
		writer.writeString(4, f)
	}
	f = message.getSimulationsettingjson()
	if (f.length > 0) {
		writer.writeString(5, f)
	}
}

/**
 * optional string rname = 1;
 * @return {string}
 */
proto.rpggame.SimulationSetting.prototype.getRname = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.SimulationSetting} returns this
 */
proto.rpggame.SimulationSetting.prototype.setRname = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value)
}

/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.rpggame.SimulationSetting.prototype.getCount = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0))
}

/**
 * @param {number} value
 * @return {!proto.rpggame.SimulationSetting} returns this
 */
proto.rpggame.SimulationSetting.prototype.setCount = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value)
}

/**
 * optional bool isTeam = 3;
 * @return {boolean}
 */
proto.rpggame.SimulationSetting.prototype.getIsteam = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false))
}

/**
 * @param {boolean} value
 * @return {!proto.rpggame.SimulationSetting} returns this
 */
proto.rpggame.SimulationSetting.prototype.setIsteam = function (value) {
	return jspb.Message.setProto3BooleanField(this, 3, value)
}

/**
 * optional string runnerId = 4;
 * @return {string}
 */
proto.rpggame.SimulationSetting.prototype.getRunnerid = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.SimulationSetting} returns this
 */
proto.rpggame.SimulationSetting.prototype.setRunnerid = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value)
}

/**
 * optional string simulationSettingJson = 5;
 * @return {string}
 */
proto.rpggame.SimulationSetting.prototype.getSimulationsettingjson = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""))
}

/**
 * @param {string} value
 * @return {!proto.rpggame.SimulationSetting} returns this
 */
proto.rpggame.SimulationSetting.prototype.setSimulationsettingjson = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value)
}

goog.object.extend(exports, proto.rpggame)
