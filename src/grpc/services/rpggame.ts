/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: src/grpc/proto/rpggame.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace rpggame {
    export class Int extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            val?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("val" in data && data.val != undefined) {
                    this.val = data.val;
                }
            }
        }
        get val() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set val(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            val?: number;
        }): Int {
            const message = new Int({});
            if (data.val != null) {
                message.val = data.val;
            }
            return message;
        }
        toObject() {
            const data: {
                val?: number;
            } = {};
            if (this.val != null) {
                data.val = this.val;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.val != 0)
                writer.writeInt32(1, this.val);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Int {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Int();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.val = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Int {
            return Int.deserialize(bytes);
        }
    }
    export class Void extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): Void {
            const message = new Void({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Void {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Void();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Void {
            return Void.deserialize(bytes);
        }
    }
    export class Bool extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            val?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("val" in data && data.val != undefined) {
                    this.val = data.val;
                }
            }
        }
        get val() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set val(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            val?: boolean;
        }): Bool {
            const message = new Bool({});
            if (data.val != null) {
                message.val = data.val;
            }
            return message;
        }
        toObject() {
            const data: {
                val?: boolean;
            } = {};
            if (this.val != null) {
                data.val = this.val;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.val != false)
                writer.writeBool(1, this.val);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bool {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Bool();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.val = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Bool {
            return Bool.deserialize(bytes);
        }
    }
    export class String extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            val?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("val" in data && data.val != undefined) {
                    this.val = data.val;
                }
            }
        }
        get val() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set val(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            val?: string;
        }): String {
            const message = new String({});
            if (data.val != null) {
                message.val = data.val;
            }
            return message;
        }
        toObject() {
            const data: {
                val?: string;
            } = {};
            if (this.val != null) {
                data.val = this.val;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.val.length)
                writer.writeString(1, this.val);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): String {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new String();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.val = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): String {
            return String.deserialize(bytes);
        }
    }
    export class ProtoPlayer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            name?: string;
            team?: boolean;
            champ?: number;
            ready?: boolean;
            userClass?: number;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("team" in data && data.team != undefined) {
                    this.team = data.team;
                }
                if ("champ" in data && data.champ != undefined) {
                    this.champ = data.champ;
                }
                if ("ready" in data && data.ready != undefined) {
                    this.ready = data.ready;
                }
                if ("userClass" in data && data.userClass != undefined) {
                    this.userClass = data.userClass;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get team() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set team(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get champ() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set champ(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get ready() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set ready(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get userClass() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set userClass(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            team?: boolean;
            champ?: number;
            ready?: boolean;
            userClass?: number;
            data?: string;
        }): ProtoPlayer {
            const message = new ProtoPlayer({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.team != null) {
                message.team = data.team;
            }
            if (data.champ != null) {
                message.champ = data.champ;
            }
            if (data.ready != null) {
                message.ready = data.ready;
            }
            if (data.userClass != null) {
                message.userClass = data.userClass;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                team?: boolean;
                champ?: number;
                ready?: boolean;
                userClass?: number;
                data?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.team != null) {
                data.team = this.team;
            }
            if (this.champ != null) {
                data.champ = this.champ;
            }
            if (this.ready != null) {
                data.ready = this.ready;
            }
            if (this.userClass != null) {
                data.userClass = this.userClass;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.team != false)
                writer.writeBool(3, this.team);
            if (this.champ != 0)
                writer.writeInt32(4, this.champ);
            if (this.ready != false)
                writer.writeBool(5, this.ready);
            if (this.userClass != 0)
                writer.writeInt32(6, this.userClass);
            if (this.data.length)
                writer.writeString(7, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoPlayer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoPlayer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.team = reader.readBool();
                        break;
                    case 4:
                        message.champ = reader.readInt32();
                        break;
                    case 5:
                        message.ready = reader.readBool();
                        break;
                    case 6:
                        message.userClass = reader.readInt32();
                        break;
                    case 7:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoPlayer {
            return ProtoPlayer.deserialize(bytes);
        }
    }
    export class GameSetting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rname?: string;
            gametype?: string;
            map?: number;
            isTeam?: boolean;
            playerlist?: ProtoPlayer[];
            gameSettingJson?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("gametype" in data && data.gametype != undefined) {
                    this.gametype = data.gametype;
                }
                if ("map" in data && data.map != undefined) {
                    this.map = data.map;
                }
                if ("isTeam" in data && data.isTeam != undefined) {
                    this.isTeam = data.isTeam;
                }
                if ("playerlist" in data && data.playerlist != undefined) {
                    this.playerlist = data.playerlist;
                }
                if ("gameSettingJson" in data && data.gameSettingJson != undefined) {
                    this.gameSettingJson = data.gameSettingJson;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get gametype() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set gametype(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get map() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set map(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get isTeam() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isTeam(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get playerlist() {
            return pb_1.Message.getRepeatedWrapperField(this, ProtoPlayer, 5) as ProtoPlayer[];
        }
        set playerlist(value: ProtoPlayer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get gameSettingJson() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set gameSettingJson(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            rname?: string;
            gametype?: string;
            map?: number;
            isTeam?: boolean;
            playerlist?: ReturnType<typeof ProtoPlayer.prototype.toObject>[];
            gameSettingJson?: string;
        }): GameSetting {
            const message = new GameSetting({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.gametype != null) {
                message.gametype = data.gametype;
            }
            if (data.map != null) {
                message.map = data.map;
            }
            if (data.isTeam != null) {
                message.isTeam = data.isTeam;
            }
            if (data.playerlist != null) {
                message.playerlist = data.playerlist.map(item => ProtoPlayer.fromObject(item));
            }
            if (data.gameSettingJson != null) {
                message.gameSettingJson = data.gameSettingJson;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                gametype?: string;
                map?: number;
                isTeam?: boolean;
                playerlist?: ReturnType<typeof ProtoPlayer.prototype.toObject>[];
                gameSettingJson?: string;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.gametype != null) {
                data.gametype = this.gametype;
            }
            if (this.map != null) {
                data.map = this.map;
            }
            if (this.isTeam != null) {
                data.isTeam = this.isTeam;
            }
            if (this.playerlist != null) {
                data.playerlist = this.playerlist.map((item: ProtoPlayer) => item.toObject());
            }
            if (this.gameSettingJson != null) {
                data.gameSettingJson = this.gameSettingJson;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.gametype.length)
                writer.writeString(2, this.gametype);
            if (this.map != 0)
                writer.writeInt32(3, this.map);
            if (this.isTeam != false)
                writer.writeBool(4, this.isTeam);
            if (this.playerlist.length)
                writer.writeRepeatedMessage(5, this.playerlist, (item: ProtoPlayer) => item.serialize(writer));
            if (this.gameSettingJson.length)
                writer.writeString(6, this.gameSettingJson);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameSetting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameSetting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.gametype = reader.readString();
                        break;
                    case 3:
                        message.map = reader.readInt32();
                        break;
                    case 4:
                        message.isTeam = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.playerlist, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ProtoPlayer.deserialize(reader), ProtoPlayer));
                        break;
                    case 6:
                        message.gameSettingJson = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameSetting {
            return GameSetting.deserialize(bytes);
        }
    }
    export class SimpleRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rname?: string;
            turn?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("turn" in data && data.turn != undefined) {
                    this.turn = data.turn;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get turn() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set turn(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            rname?: string;
            turn?: number;
        }): SimpleRequest {
            const message = new SimpleRequest({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.turn != null) {
                message.turn = data.turn;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                turn?: number;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.turn != null) {
                data.turn = this.turn;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.turn != 0)
                writer.writeInt32(2, this.turn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimpleRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimpleRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.turn = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimpleRequest {
            return SimpleRequest.deserialize(bytes);
        }
    }
    export class UserUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            type?: string;
            rname?: string;
            turn?: number;
        } & (({
            jsonData?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("jsonData" in data && data.jsonData != undefined) {
                    this.jsonData = data.jsonData;
                }
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("turn" in data && data.turn != undefined) {
                    this.turn = data.turn;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get jsonData() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jsonData(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_jsonData() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get turn() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set turn(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get _jsonData() {
            const cases: {
                [index: number]: "none" | "jsonData";
            } = {
                0: "none",
                2: "jsonData"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            type?: string;
            jsonData?: string;
            rname?: string;
            turn?: number;
        }): UserUpdateRequest {
            const message = new UserUpdateRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.jsonData != null) {
                message.jsonData = data.jsonData;
            }
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.turn != null) {
                message.turn = data.turn;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                jsonData?: string;
                rname?: string;
                turn?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.jsonData != null) {
                data.jsonData = this.jsonData;
            }
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.turn != null) {
                data.turn = this.turn;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.has_jsonData)
                writer.writeString(2, this.jsonData);
            if (this.rname.length)
                writer.writeString(3, this.rname);
            if (this.turn != 0)
                writer.writeInt32(4, this.turn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.jsonData = reader.readString();
                        break;
                    case 3:
                        message.rname = reader.readString();
                        break;
                    case 4:
                        message.turn = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserUpdateRequest {
            return UserUpdateRequest.deserialize(bytes);
        }
    }
    export class UserSecureRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            type?: string;
            turnToken?: string;
            rname?: string;
            turn?: number;
        } & (({
            jsonData?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("turnToken" in data && data.turnToken != undefined) {
                    this.turnToken = data.turnToken;
                }
                if ("jsonData" in data && data.jsonData != undefined) {
                    this.jsonData = data.jsonData;
                }
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("turn" in data && data.turn != undefined) {
                    this.turn = data.turn;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get turnToken() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set turnToken(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get jsonData() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set jsonData(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_jsonData() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get turn() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set turn(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get _jsonData() {
            const cases: {
                [index: number]: "none" | "jsonData";
            } = {
                0: "none",
                3: "jsonData"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            type?: string;
            turnToken?: string;
            jsonData?: string;
            rname?: string;
            turn?: number;
        }): UserSecureRequest {
            const message = new UserSecureRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.turnToken != null) {
                message.turnToken = data.turnToken;
            }
            if (data.jsonData != null) {
                message.jsonData = data.jsonData;
            }
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.turn != null) {
                message.turn = data.turn;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                turnToken?: string;
                jsonData?: string;
                rname?: string;
                turn?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.turnToken != null) {
                data.turnToken = this.turnToken;
            }
            if (this.jsonData != null) {
                data.jsonData = this.jsonData;
            }
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.turn != null) {
                data.turn = this.turn;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.turnToken.length)
                writer.writeString(2, this.turnToken);
            if (this.has_jsonData)
                writer.writeString(3, this.jsonData);
            if (this.rname.length)
                writer.writeString(5, this.rname);
            if (this.turn != 0)
                writer.writeInt32(4, this.turn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSecureRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSecureRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.turnToken = reader.readString();
                        break;
                    case 3:
                        message.jsonData = reader.readString();
                        break;
                    case 5:
                        message.rname = reader.readString();
                        break;
                    case 4:
                        message.turn = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserSecureRequest {
            return UserSecureRequest.deserialize(bytes);
        }
    }
    export class JsonResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jsonData?: string;
            rname?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jsonData" in data && data.jsonData != undefined) {
                    this.jsonData = data.jsonData;
                }
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
            }
        }
        get jsonData() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jsonData(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            jsonData?: string;
            rname?: string;
        }): JsonResponse {
            const message = new JsonResponse({});
            if (data.jsonData != null) {
                message.jsonData = data.jsonData;
            }
            if (data.rname != null) {
                message.rname = data.rname;
            }
            return message;
        }
        toObject() {
            const data: {
                jsonData?: string;
                rname?: string;
            } = {};
            if (this.jsonData != null) {
                data.jsonData = this.jsonData;
            }
            if (this.rname != null) {
                data.rname = this.rname;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jsonData.length)
                writer.writeString(1, this.jsonData);
            if (this.rname.length)
                writer.writeString(2, this.rname);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JsonResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JsonResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jsonData = reader.readString();
                        break;
                    case 2:
                        message.rname = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JsonResponse {
            return JsonResponse.deserialize(bytes);
        }
    }
    export class GameEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            rname?: string;
            jsonObj?: string;
            type?: string;
        } & (({
            isGameOver?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("jsonObj" in data && data.jsonObj != undefined) {
                    this.jsonObj = data.jsonObj;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("isGameOver" in data && data.isGameOver != undefined) {
                    this.isGameOver = data.isGameOver;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get jsonObj() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jsonObj(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get isGameOver() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isGameOver(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_isGameOver() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _isGameOver() {
            const cases: {
                [index: number]: "none" | "isGameOver";
            } = {
                0: "none",
                4: "isGameOver"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            rname?: string;
            jsonObj?: string;
            type?: string;
            isGameOver?: boolean;
        }): GameEvent {
            const message = new GameEvent({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.jsonObj != null) {
                message.jsonObj = data.jsonObj;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.isGameOver != null) {
                message.isGameOver = data.isGameOver;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                jsonObj?: string;
                type?: string;
                isGameOver?: boolean;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.jsonObj != null) {
                data.jsonObj = this.jsonObj;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.isGameOver != null) {
                data.isGameOver = this.isGameOver;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.jsonObj.length)
                writer.writeString(2, this.jsonObj);
            if (this.type.length)
                writer.writeString(3, this.type);
            if (this.has_isGameOver)
                writer.writeBool(4, this.isGameOver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.jsonObj = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.isGameOver = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameEvent {
            return GameEvent.deserialize(bytes);
        }
    }
    export class SimulationEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[4]];
        constructor(data?: any[] | ({
            rname?: string;
            type?: string;
            jsonObj?: string;
        } & (({
            isGameOver?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("jsonObj" in data && data.jsonObj != undefined) {
                    this.jsonObj = data.jsonObj;
                }
                if ("isGameOver" in data && data.isGameOver != undefined) {
                    this.isGameOver = data.isGameOver;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get jsonObj() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set jsonObj(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get isGameOver() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isGameOver(value: boolean) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_isGameOver() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get _isGameOver() {
            const cases: {
                [index: number]: "none" | "isGameOver";
            } = {
                0: "none",
                4: "isGameOver"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        static fromObject(data: {
            rname?: string;
            type?: string;
            jsonObj?: string;
            isGameOver?: boolean;
        }): SimulationEvent {
            const message = new SimulationEvent({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.jsonObj != null) {
                message.jsonObj = data.jsonObj;
            }
            if (data.isGameOver != null) {
                message.isGameOver = data.isGameOver;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                type?: string;
                jsonObj?: string;
                isGameOver?: boolean;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.jsonObj != null) {
                data.jsonObj = this.jsonObj;
            }
            if (this.isGameOver != null) {
                data.isGameOver = this.isGameOver;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.jsonObj.length)
                writer.writeString(3, this.jsonObj);
            if (this.has_isGameOver)
                writer.writeBool(4, this.isGameOver);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulationEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulationEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.jsonObj = reader.readString();
                        break;
                    case 4:
                        message.isGameOver = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimulationEvent {
            return SimulationEvent.deserialize(bytes);
        }
    }
    export class SimulationSetting extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rname?: string;
            count?: number;
            isTeam?: boolean;
            runnerId?: string;
            simulationSettingJson?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rname" in data && data.rname != undefined) {
                    this.rname = data.rname;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("isTeam" in data && data.isTeam != undefined) {
                    this.isTeam = data.isTeam;
                }
                if ("runnerId" in data && data.runnerId != undefined) {
                    this.runnerId = data.runnerId;
                }
                if ("simulationSettingJson" in data && data.simulationSettingJson != undefined) {
                    this.simulationSettingJson = data.simulationSettingJson;
                }
            }
        }
        get rname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set rname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get isTeam() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isTeam(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get runnerId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set runnerId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get simulationSettingJson() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set simulationSettingJson(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            rname?: string;
            count?: number;
            isTeam?: boolean;
            runnerId?: string;
            simulationSettingJson?: string;
        }): SimulationSetting {
            const message = new SimulationSetting({});
            if (data.rname != null) {
                message.rname = data.rname;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.isTeam != null) {
                message.isTeam = data.isTeam;
            }
            if (data.runnerId != null) {
                message.runnerId = data.runnerId;
            }
            if (data.simulationSettingJson != null) {
                message.simulationSettingJson = data.simulationSettingJson;
            }
            return message;
        }
        toObject() {
            const data: {
                rname?: string;
                count?: number;
                isTeam?: boolean;
                runnerId?: string;
                simulationSettingJson?: string;
            } = {};
            if (this.rname != null) {
                data.rname = this.rname;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.isTeam != null) {
                data.isTeam = this.isTeam;
            }
            if (this.runnerId != null) {
                data.runnerId = this.runnerId;
            }
            if (this.simulationSettingJson != null) {
                data.simulationSettingJson = this.simulationSettingJson;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rname.length)
                writer.writeString(1, this.rname);
            if (this.count != 0)
                writer.writeInt32(2, this.count);
            if (this.isTeam != false)
                writer.writeBool(3, this.isTeam);
            if (this.runnerId.length)
                writer.writeString(4, this.runnerId);
            if (this.simulationSettingJson.length)
                writer.writeString(5, this.simulationSettingJson);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SimulationSetting {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimulationSetting();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rname = reader.readString();
                        break;
                    case 2:
                        message.count = reader.readInt32();
                        break;
                    case 3:
                        message.isTeam = reader.readBool();
                        break;
                    case 4:
                        message.runnerId = reader.readString();
                        break;
                    case 5:
                        message.simulationSettingJson = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SimulationSetting {
            return SimulationSetting.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRPGGameService {
        static definition = {
            ResetGame: {
                path: "/rpggame.RPGGame/ResetGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            InitGame: {
                path: "/rpggame.RPGGame/InitGame",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GameSetting) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GameSetting.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            StartSimulation: {
                path: "/rpggame.RPGGame/StartSimulation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SimulationSetting) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SimulationSetting.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            RequestSetting: {
                path: "/rpggame.RPGGame/RequestSetting",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SimpleRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SimpleRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: String) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes))
            },
            RequestGameStart: {
                path: "/rpggame.RPGGame/RequestGameStart",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            RequestItemStatus: {
                path: "/rpggame.RPGGame/RequestItemStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JsonResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JsonResponse.deserialize(new Uint8Array(bytes))
            },
            UserUpdate: {
                path: "/rpggame.RPGGame/UserUpdate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            UserDisconnect: {
                path: "/rpggame.RPGGame/UserDisconnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            UserReconnect: {
                path: "/rpggame.RPGGame/UserReconnect",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectObstacle: {
                path: "/rpggame.RPGGame/SelectObstacle",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectAction: {
                path: "/rpggame.RPGGame/SelectAction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            BasicAttack: {
                path: "/rpggame.RPGGame/BasicAttack",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            ThrowDice: {
                path: "/rpggame.RPGGame/ThrowDice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectSkill: {
                path: "/rpggame.RPGGame/SelectSkill",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: JsonResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => JsonResponse.deserialize(new Uint8Array(bytes))
            },
            SelectTarget: {
                path: "/rpggame.RPGGame/SelectTarget",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectLocation: {
                path: "/rpggame.RPGGame/SelectLocation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            SelectAreaSkillLocation: {
                path: "/rpggame.RPGGame/SelectAreaSkillLocation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            BuyItem: {
                path: "/rpggame.RPGGame/BuyItem",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            NextTurn: {
                path: "/rpggame.RPGGame/NextTurn",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UserSecureRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UserSecureRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Bool) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Bool.deserialize(new Uint8Array(bytes))
            },
            ListenGameEvent: {
                path: "/rpggame.RPGGame/ListenGameEvent",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GameEvent) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GameEvent.deserialize(new Uint8Array(bytes))
            },
            ListenSimulationEvent: {
                path: "/rpggame.RPGGame/ListenSimulationEvent",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: String) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => String.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SimulationEvent) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SimulationEvent.deserialize(new Uint8Array(bytes))
            },
            Ping: {
                path: "/rpggame.RPGGame/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Int) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Int.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Int) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Int.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ResetGame(call: grpc_1.ServerUnaryCall<String, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract InitGame(call: grpc_1.ServerUnaryCall<GameSetting, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract StartSimulation(call: grpc_1.ServerUnaryCall<SimulationSetting, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract RequestSetting(call: grpc_1.ServerUnaryCall<SimpleRequest, String>, callback: grpc_1.sendUnaryData<String>): void;
        abstract RequestGameStart(call: grpc_1.ServerUnaryCall<String, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract RequestItemStatus(call: grpc_1.ServerUnaryCall<String, JsonResponse>, callback: grpc_1.sendUnaryData<JsonResponse>): void;
        abstract UserUpdate(call: grpc_1.ServerUnaryCall<UserUpdateRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract UserDisconnect(call: grpc_1.ServerUnaryCall<UserUpdateRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract UserReconnect(call: grpc_1.ServerUnaryCall<UserUpdateRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectObstacle(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectAction(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract BasicAttack(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract ThrowDice(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectSkill(call: grpc_1.ServerUnaryCall<UserSecureRequest, JsonResponse>, callback: grpc_1.sendUnaryData<JsonResponse>): void;
        abstract SelectTarget(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectLocation(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract SelectAreaSkillLocation(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract BuyItem(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract NextTurn(call: grpc_1.ServerUnaryCall<UserSecureRequest, Bool>, callback: grpc_1.sendUnaryData<Bool>): void;
        abstract ListenGameEvent(call: grpc_1.ServerWritableStream<String, GameEvent>): void;
        abstract ListenSimulationEvent(call: grpc_1.ServerWritableStream<String, SimulationEvent>): void;
        abstract Ping(call: grpc_1.ServerUnaryCall<Int, Int>, callback: grpc_1.sendUnaryData<Int>): void;
    }
    export class RPGGameClient extends grpc_1.makeGenericClientConstructor(UnimplementedRPGGameService.definition, "RPGGame", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ResetGame: GrpcUnaryServiceInterface<String, Bool> = (message: String, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.ResetGame(message, metadata, options, callback);
        };
        InitGame: GrpcUnaryServiceInterface<GameSetting, Bool> = (message: GameSetting, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.InitGame(message, metadata, options, callback);
        };
        StartSimulation: GrpcUnaryServiceInterface<SimulationSetting, Bool> = (message: SimulationSetting, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.StartSimulation(message, metadata, options, callback);
        };
        RequestSetting: GrpcUnaryServiceInterface<SimpleRequest, String> = (message: SimpleRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<String>, options?: grpc_1.CallOptions | grpc_1.requestCallback<String>, callback?: grpc_1.requestCallback<String>): grpc_1.ClientUnaryCall => {
            return super.RequestSetting(message, metadata, options, callback);
        };
        RequestGameStart: GrpcUnaryServiceInterface<String, Bool> = (message: String, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.RequestGameStart(message, metadata, options, callback);
        };
        RequestItemStatus: GrpcUnaryServiceInterface<String, JsonResponse> = (message: String, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JsonResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JsonResponse>, callback?: grpc_1.requestCallback<JsonResponse>): grpc_1.ClientUnaryCall => {
            return super.RequestItemStatus(message, metadata, options, callback);
        };
        UserUpdate: GrpcUnaryServiceInterface<UserUpdateRequest, Bool> = (message: UserUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.UserUpdate(message, metadata, options, callback);
        };
        UserDisconnect: GrpcUnaryServiceInterface<UserUpdateRequest, Bool> = (message: UserUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.UserDisconnect(message, metadata, options, callback);
        };
        UserReconnect: GrpcUnaryServiceInterface<UserUpdateRequest, Bool> = (message: UserUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.UserReconnect(message, metadata, options, callback);
        };
        SelectObstacle: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectObstacle(message, metadata, options, callback);
        };
        SelectAction: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectAction(message, metadata, options, callback);
        };
        BasicAttack: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.BasicAttack(message, metadata, options, callback);
        };
        ThrowDice: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.ThrowDice(message, metadata, options, callback);
        };
        SelectSkill: GrpcUnaryServiceInterface<UserSecureRequest, JsonResponse> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JsonResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JsonResponse>, callback?: grpc_1.requestCallback<JsonResponse>): grpc_1.ClientUnaryCall => {
            return super.SelectSkill(message, metadata, options, callback);
        };
        SelectTarget: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectTarget(message, metadata, options, callback);
        };
        SelectLocation: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectLocation(message, metadata, options, callback);
        };
        SelectAreaSkillLocation: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.SelectAreaSkillLocation(message, metadata, options, callback);
        };
        BuyItem: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.BuyItem(message, metadata, options, callback);
        };
        NextTurn: GrpcUnaryServiceInterface<UserSecureRequest, Bool> = (message: UserSecureRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Bool>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Bool>, callback?: grpc_1.requestCallback<Bool>): grpc_1.ClientUnaryCall => {
            return super.NextTurn(message, metadata, options, callback);
        };
        ListenGameEvent: GrpcStreamServiceInterface<String, GameEvent> = (message: String, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GameEvent> => {
            return super.ListenGameEvent(message, metadata, options);
        };
        ListenSimulationEvent: GrpcStreamServiceInterface<String, SimulationEvent> = (message: String, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<SimulationEvent> => {
            return super.ListenSimulationEvent(message, metadata, options);
        };
        Ping: GrpcUnaryServiceInterface<Int, Int> = (message: Int, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Int>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Int>, callback?: grpc_1.requestCallback<Int>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
    }
}
